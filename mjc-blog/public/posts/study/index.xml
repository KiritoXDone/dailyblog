<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>👨🏻‍💻 技术 on KiritoXD&#39;s Blog</title>
    <link>https://mjc.us.kg/posts/study/</link>
    <description>Recent content in 👨🏻‍💻 技术 on KiritoXD&#39;s Blog</description>
    <generator>Hugo -- 0.129.0</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 07 Oct 2024 22:15:28 +0800</lastBuildDate>
    <atom:link href="https://mjc.us.kg/posts/study/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>近日刷题记录 3</title>
      <link>https://mjc.us.kg/posts/study/2024102222/</link>
      <pubDate>Mon, 07 Oct 2024 22:15:28 +0800</pubDate>
      <guid>https://mjc.us.kg/posts/study/2024102222/</guid>
      <description>ABC374 C - Separated Lunch 将 $n$ 个数尽量均分，因为最多只有 20 个数据，可以直接暴搜 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; #define ls now&amp;lt;&amp;lt;1 #define rs now&amp;lt;&amp;lt;1|1 #define endl &amp;#34;\n&amp;#34; #define lowbit(x) ((x)&amp;amp;(-x)) #define int long long const int N=1e5+7, mod=1e9+7; int n,s,ans=INT_MAX; int a[N]; void dfs(int cnt,int sum){ if(cnt==n){ ans=min(ans,max(sum,s-sum)); return; } dfs(cnt+1,sum); dfs(cnt+1,sum+a[cnt+1]); } void solve(){ cin&amp;gt;&amp;gt;n; for(int i=1;i&amp;lt;=n;i++){ cin&amp;gt;&amp;gt;a[i]; s+=a[i]; } dfs(0,0); cout&amp;lt;&amp;lt;ans&amp;lt;&amp;lt;endl; } signed main(){ ios::sync_with_stdio(0); cin.tie(0);cout.tie(0); int t=1; // cin&amp;gt;&amp;gt;t; while(t--)solve(); return 0; } ABC374 E - Sensor Optimization Dilemma 2 易想到二分答案，但是在 $check$ 过程中，对每个进程机器的选择需要考虑 如果直接暴力从 $0$ 到</description>
    </item>
    <item>
      <title>近日刷题记录 2</title>
      <link>https://mjc.us.kg/posts/study/202410/</link>
      <pubDate>Sun, 06 Oct 2024 19:05:38 +0800</pubDate>
      <guid>https://mjc.us.kg/posts/study/202410/</guid>
      <description>AtCoder ABC372 D - Buildings 单调栈，逆向进行，找左侧比他大的数，此时栈的大小即为当前位的答案 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; #define ls now&amp;lt;&amp;lt;1 #define rs now&amp;lt;&amp;lt;1|1 #define endl &amp;#34;\n&amp;#34; #define lowbit(x) ((x)&amp;amp;(-x)) typedef long long ll; const int N=2e5+7, mod=1e9+7; int n,h[N],ans[N]; stack&amp;lt;int&amp;gt;s; void solve(){ cin&amp;gt;&amp;gt;n; for(int i=1;i&amp;lt;=n;i++){ cin&amp;gt;&amp;gt;h[i]; } for(int i=n;i&amp;gt;=1;i--){ ans[i]=s.size(); while(s.size()&amp;amp;&amp;amp;s.top()&amp;lt;h[i])s.pop(); s.push(h[i]); } for(int i=1;i&amp;lt;=n;i++)cout&amp;lt;&amp;lt;ans[i]&amp;lt;&amp;lt;&amp;#34; &amp;#34;; } int main(){ ios::sync_with_stdio(0); cin.tie(0);cout.tie(0); int t=1; // cin&amp;gt;&amp;gt;t; while(t--)solve(); return 0; } ABC372 E - K-th Largest Connected Components 并查集，我们可以开 $n$ 个堆，把每个联通块都存到同一个栈当中，查询时栈的大小小于 $k$</description>
    </item>
    <item>
      <title>近日刷题记录</title>
      <link>https://mjc.us.kg/posts/study/202409/</link>
      <pubDate>Fri, 04 Oct 2024 21:53:44 +0800</pubDate>
      <guid>https://mjc.us.kg/posts/study/202409/</guid>
      <description>AtCoder ABC371C Make Isomorphic 给你简单的无向图 $G$ 和 $H$ ，每个图都有 $N$ 个顶点：顶点 $1$ 、 $2$ 、 $\ldots$ 、 $N$ 。图 $G$ 有 $M_G$ 条边，其第 $i$ 条边 $(1\leq i\leq M_G)$ 连接顶点 $u_i$ 和 $v_i$ 。图 $H$ 有 $M_H$ 条边，它的第 $i$ 条边 $(1\leq i\leq M_H)$ 连接顶点 $a_i$ 和 $b_i$ 。 您可以在图 $H$ 上执行以下操作，次数不限，可能为零。 选择一对满足 $1\le i&amp;lt;j\leq N$ 的整数 $(i,j)$ 。支付 $A_{i,j}$ 点成本，如果 $H$ 中的顶点 $i$ 和 $j$ 之间</description>
    </item>
    <item>
      <title>2024CCPC网络赛</title>
      <link>https://mjc.us.kg/posts/study/2024ccpconline/</link>
      <pubDate>Tue, 10 Sep 2024 14:45:39 +0800</pubDate>
      <guid>https://mjc.us.kg/posts/study/2024ccpconline/</guid>
      <description>前言 好久没写题了，被暴打。 参赛过程也是抽象，开局就罚站 30 min 补题 L 网络预选赛 好不容易卡出来题面，看到 L 已经过了不少了，卡了半天才提交过 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; #define ls now&amp;lt;&amp;lt;1 #define rs now&amp;lt;&amp;lt;1|1 #define endl &amp;#34;\n&amp;#34; typedef long long ll; const int N=1e3+7, mod=1e9+7; void solve(){ int n, m, ans = 0; char mp[N][N]; cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m; for(int i = 1; i &amp;lt;= n; i++) for(int j = 1; j &amp;lt;= m; j++) cin &amp;gt;&amp;gt; mp[i][j]; for(int i = 1; i &amp;lt; n; i++){ for(int j = 1; j &amp;lt; m; j++){ if(mp[i][j] ==</description>
    </item>
    <item>
      <title>2024萌新联赛6</title>
      <link>https://mjc.us.kg/posts/study/2024%E8%90%8C%E6%96%B0%E8%81%94%E8%B5%9B6/</link>
      <pubDate>Mon, 26 Aug 2024 17:52:28 +0800</pubDate>
      <guid>https://mjc.us.kg/posts/study/2024%E8%90%8C%E6%96%B0%E8%81%94%E8%B5%9B6/</guid>
      <description>2024 河南萌新联赛 6 装备二选一（一） 直接比较结果即可 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; typedef long long ll; #define ls now&amp;lt;&amp;lt;1 #define rs now&amp;lt;&amp;lt;1|1 const int N = 1e5+7, mod = 1e9+7; void solve(){ int a, b, c, d; cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b &amp;gt;&amp;gt; c &amp;gt;&amp;gt; d; int t1 = 100 * b * a + 100 * (100 - a); int t2 = 100 * d * c + 100 * (100 - c); cout &amp;lt;&amp;lt; (t2 &amp;gt; t1 ? &amp;#34;YES\n&amp;#34; : &amp;#34;NO\n&amp;#34;); } int main(){ ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); int t = 1; // cin &amp;gt;&amp;gt; t; while(t--) solve(); return 0; } 追寻光的方向 开一个 $suf$ 数组，用于记录 $i$ 位置后</description>
    </item>
    <item>
      <title>2024萌新联赛5</title>
      <link>https://mjc.us.kg/posts/study/2024%E8%90%8C%E6%96%B0%E8%81%94%E8%B5%9B5/</link>
      <pubDate>Sat, 17 Aug 2024 22:45:18 +0800</pubDate>
      <guid>https://mjc.us.kg/posts/study/2024%E8%90%8C%E6%96%B0%E8%81%94%E8%B5%9B5/</guid>
      <description>2024 河南萌新联赛 5 平方根 直接 sqrt 向下取整即可 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; int main(){ int t; cin&amp;gt;&amp;gt;t; while(t--){ unsigned long long n; cin&amp;gt;&amp;gt;n; long long ans=floor(sqrt(n)); cout&amp;lt;&amp;lt;ans&amp;lt;&amp;lt;endl; } } 爬楼梯 递归 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; int main(){ int f[1000005],mod=1e9+7; f[0]=f[1]=1; int n; cin&amp;gt;&amp;gt;n; for(int i=2;i&amp;lt;=n;i++){ for(int j=1;j&amp;lt;=3;j++){ if(i-j&amp;lt;0)break; f[i]=(f[i]+f[i-j])%mod; } } cout&amp;lt;&amp;lt;f[n]&amp;lt;&amp;lt;endl; } 区间问题 1 线段树板 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; typedef long long ll; const int N = 1e5 + 7; #define ls (now &amp;lt;&amp;lt; 1) #define rs (now &amp;lt;&amp;lt; 1 | 1) #define int long long int n, m; int a[N]; struct Node { int len, sum, tag; } tr[N &amp;lt;&amp;lt; 2]; Node operator + (const Node &amp;amp;l, const Node &amp;amp;r) { Node a; a.sum</description>
    </item>
    <item>
      <title>ABC366</title>
      <link>https://mjc.us.kg/posts/study/abc366/</link>
      <pubDate>Sun, 11 Aug 2024 12:29:38 +0800</pubDate>
      <guid>https://mjc.us.kg/posts/study/abc366/</guid>
      <description>AtCoder Beginner Contest 366 补题 A - Election 2 判断当前是否有值大于 $n/2$ 即可 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; typedef long long ll; #define ls now&amp;lt;&amp;lt;1 #define rs now&amp;lt;&amp;lt;1|1 const int N = 1e5+7, mod = 1e9+7; void solve(){ int n,t,a; cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;t&amp;gt;&amp;gt;a; if(n==1&amp;amp;&amp;amp;t==0&amp;amp;&amp;amp;a==0){ cout&amp;lt;&amp;lt;&amp;#34;No\n&amp;#34;; } else if(t&amp;gt;n/2||a&amp;gt;n/2){ cout&amp;lt;&amp;lt;&amp;#34;Yes\n&amp;#34;; } else cout&amp;lt;&amp;lt;&amp;#34;No\n&amp;#34;; } int main(){ ios::sync_with_stdio(0); cin.tie(0);cout.tie(0); int t=1; // cin&amp;gt;&amp;gt;t; while(t--)solve(); return 0; } B - Vertical Writing 翻转字符串，同时对翻转后的每行从末尾开始清 * 即可 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; typedef long long ll; #define ls now&amp;lt;&amp;lt;1 #define rs now&amp;lt;&amp;lt;1|1 const int N = 1e5+7, mod = 1e9+7; void solve(){ int n,mx=0; cin&amp;gt;&amp;gt;n; string s[N]; for(int i=1;i&amp;lt;=n;i++){ cin&amp;gt;&amp;gt;s[i]; mx=max(mx,(int)s[i].length()); } string ans[mx+1]; for(int i=0;i&amp;lt;mx;i++){</description>
    </item>
    <item>
      <title>2024HDU4</title>
      <link>https://mjc.us.kg/posts/study/2024hdu4/</link>
      <pubDate>Sat, 10 Aug 2024 10:28:15 +0800</pubDate>
      <guid>https://mjc.us.kg/posts/study/2024hdu4/</guid>
      <description>2024 杭电多校 4 补题 多层血条 模拟, 只会最覆盖最上面的一层血量, 所以不用担心下层血量是什么, 只用找到最上面的那一层是什么即可 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; string h=&amp;#34;ABCDE&amp;#34;; void solve(){ int n,m,hp,dmg; cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;m&amp;gt;&amp;gt;hp&amp;gt;&amp;gt;dmg; int lst=(hp/m)%5,x=m; string upp; upp.resize(m+1,&amp;#39; &amp;#39;); if(hp&amp;lt;=m){ for(int i=1;i&amp;lt;=hp;i++)upp[i]=h[0],x=i; } else{ int rest=hp%m; // cout&amp;lt;&amp;lt;rest&amp;lt;&amp;lt;endl; for(int i=1;i&amp;lt;=m;i++){ if(rest)upp[i]=h[lst],x=i,rest--; else upp[i]=h[(lst-1+5)%5]; } } while(dmg){ if(upp[x]==&amp;#39;.&amp;#39;)break; upp[x]=&amp;#39;.&amp;#39;; x--; dmg--; if(x==0)x=m; } for(int i=0;i&amp;lt;=n+1;i++){ for(int j=0;j&amp;lt;=m+1;j++){ if((i==0&amp;amp;&amp;amp;j==0)||(i==0&amp;amp;&amp;amp;j==m+1)||(i==n+1&amp;amp;&amp;amp;j==0)||(i==n+1&amp;amp;&amp;amp;j==m+1))cout&amp;lt;&amp;lt;&amp;#34;+&amp;#34;; else if(i==0||i==n+1)cout&amp;lt;&amp;lt;&amp;#34;-&amp;#34;; else if(j==0||j==m+1)cout&amp;lt;&amp;lt;&amp;#34;|&amp;#34;; else cout&amp;lt;&amp;lt;upp[j]; } cout&amp;lt;&amp;lt;endl; } } int main(){ int t; cin&amp;gt;&amp;gt;t; while(t--)solve(); return 0; } 昵称检索 昵称分姓名和生日两部分,</description>
    </item>
    <item>
      <title>2024萌新联赛4</title>
      <link>https://mjc.us.kg/posts/study/2024%E8%90%8C%E6%96%B0%E8%81%94%E8%B5%9B4/</link>
      <pubDate>Thu, 08 Aug 2024 22:44:47 +0800</pubDate>
      <guid>https://mjc.us.kg/posts/study/2024%E8%90%8C%E6%96%B0%E8%81%94%E8%B5%9B4/</guid>
      <description>2024 萌新联赛 4 D 简单的素数 遍历 1 ~ $\sqrt n$ 即可 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int N = 1e8+10; void solve(){ int n,flag=0; cin&amp;gt;&amp;gt;n; for(int i=2;i*i&amp;lt;=n;i++){ if(n%i==0){ flag=1; break; } } cout&amp;lt;&amp;lt;(flag?&amp;#34;No\n&amp;#34;:&amp;#34;Yes\n&amp;#34;); } int main(){ int t; cin&amp;gt;&amp;gt;t; while(t--)solve(); } F 小雷的算式 按题意模拟 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; typedef long long ll; #define ls now&amp;lt;&amp;lt;1 #define rs now&amp;lt;&amp;lt;1|1 const int N = 1e5+7, mod = 1e9+7; #define int long long void solve(){ string s; cin&amp;gt;&amp;gt;s; int ans=0,tmp=0; vector&amp;lt;int&amp;gt;a; for(int i=0;i&amp;lt;s.size();i++){ if(s[i]==&amp;#39;+&amp;#39;){ a.push_back(tmp); ans+=tmp,tmp=0; } else{ tmp*=10; tmp+=(s[i]-&amp;#39;0&amp;#39;); } } a.push_back(tmp); ans+=tmp; sort(a.begin(),a.end(),greater&amp;lt;int&amp;gt;()); cout&amp;lt;&amp;lt;a[0]; for(int i=1;i&amp;lt;a.size();i++){ cout&amp;lt;&amp;lt;&amp;#34;+&amp;#34;&amp;lt;&amp;lt;a[i]; } cout&amp;lt;&amp;lt;endl&amp;lt;&amp;lt;ans&amp;lt;&amp;lt;endl; } signed main(){ int t=1; // cin&amp;gt;&amp;gt;t; while(t--)solve(); return 0; } H 聪明且狡猾的恶魔 1 号恶</description>
    </item>
    <item>
      <title>LCA</title>
      <link>https://mjc.us.kg/posts/study/lca/</link>
      <pubDate>Tue, 06 Aug 2024 21:45:34 +0800</pubDate>
      <guid>https://mjc.us.kg/posts/study/lca/</guid>
      <description>LCA(最近公共祖先) 简介 两个节点的最近公共祖先，就是两个点的公共祖先里，离根最远的那个 LCA({u}) = u u 是 v 的祖先，当且仅当 LCA({u, v}) = u 如果 u, v 互不为祖先，那么二者存在 LCA({u, v}) 的两颗不同子树中 前序遍历中，$\text{LCA}(S)$ 出现在所有 S 中元素之前，后序遍历中 $\text{LCA}(S)$ 则出现在所有 S 中元素之后 两</description>
    </item>
    <item>
      <title>线段树</title>
      <link>https://mjc.us.kg/posts/study/%E7%BA%BF%E6%AE%B5%E6%A0%91/</link>
      <pubDate>Sun, 04 Aug 2024 18:57:54 +0800</pubDate>
      <guid>https://mjc.us.kg/posts/study/%E7%BA%BF%E6%AE%B5%E6%A0%91/</guid>
      <description>线段数学习 简介 常用的用来维护 区间信息 的数据结构。 线段树可以在 $O(\log N)$ 的时间复杂度内实现单点修改、区间修改、区间查询（区间求和，求区间最大值，求区间最小值）等操作。 实现过程即为将每个长度不为 1 的片段分成左右两个片段，不断递归下去，把区间分为树形结构，通过合并两端来求值 模板 单点修改 操作 1</description>
    </item>
    <item>
      <title>2024萌新联赛3</title>
      <link>https://mjc.us.kg/posts/study/2024%E8%90%8C%E6%96%B0%E8%81%94%E8%B5%9B3/</link>
      <pubDate>Fri, 02 Aug 2024 11:04:20 +0800</pubDate>
      <guid>https://mjc.us.kg/posts/study/2024%E8%90%8C%E6%96%B0%E8%81%94%E8%B5%9B3/</guid>
      <description>2024 河南萌新联赛 3 B 正则表达式 签到，四个数字都在 [1,255] 之间即为合法 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; bool check(string s) { int n = s.size(); int num = 0, dots = 0; for (int i = 0; i &amp;lt; n; i++) { if (s[i] == &amp;#39;.&amp;#39;) { if (num &amp;lt; 0 || num &amp;gt; 255) return false; num = 0; } else if (isdigit(s[i])) { num = num * 10 + (s[i] - &amp;#39;0&amp;#39;); if (num &amp;gt; 255) return false; } else { return false; } } if (num &amp;lt; 0 || num &amp;gt; 255) return false; return true; } int main() { int n; cin &amp;gt;&amp;gt; n; int cnt = 0; for(int i=1;i&amp;lt;=n;i++) { string s; cin &amp;gt;&amp;gt; s; if (check(s))</description>
    </item>
    <item>
      <title>最小生成树</title>
      <link>https://mjc.us.kg/posts/study/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</link>
      <pubDate>Tue, 30 Jul 2024 20:11:43 +0800</pubDate>
      <guid>https://mjc.us.kg/posts/study/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</guid>
      <description>最小生成树算法学习</description>
    </item>
    <item>
      <title>最短路</title>
      <link>https://mjc.us.kg/posts/study/%E6%9C%80%E7%9F%AD%E8%B7%AF/</link>
      <pubDate>Mon, 29 Jul 2024 21:43:24 +0800</pubDate>
      <guid>https://mjc.us.kg/posts/study/%E6%9C%80%E7%9F%AD%E8%B7%AF/</guid>
      <description>最短路学习记录</description>
    </item>
    <item>
      <title>2024萌新联赛1</title>
      <link>https://mjc.us.kg/posts/study/2024%E8%90%8C%E6%96%B0%E8%81%94%E8%B5%9B1/</link>
      <pubDate>Sun, 28 Jul 2024 15:36:08 +0800</pubDate>
      <guid>https://mjc.us.kg/posts/study/2024%E8%90%8C%E6%96%B0%E8%81%94%E8%B5%9B1/</guid>
      <description>萌新联赛补题</description>
    </item>
    <item>
      <title>CF962</title>
      <link>https://mjc.us.kg/posts/study/cf962/</link>
      <pubDate>Sat, 27 Jul 2024 18:28:37 +0800</pubDate>
      <guid>https://mjc.us.kg/posts/study/cf962/</guid>
      <description>Codeforces Round 962 还得练 A Legs 先除 4 再除 2 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; void solve(){ int n; cin&amp;gt;&amp;gt;n; int cnt=n/4; if(n%4!=0)cnt++; cout&amp;lt;&amp;lt;cnt&amp;lt;&amp;lt;endl; } int main(){ int t; cin&amp;gt;&amp;gt;t; while(t--)solve(); return 0; } B Scale 按题意合理间隔输出即可 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int N =1010; char mp[N][N]; void solve(){ int n,k; cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;k; for(int i=1;i&amp;lt;=n;i++) for(int j=1;j&amp;lt;=n;j++)cin&amp;gt;&amp;gt;mp[i][j]; for(int i=1;i&amp;lt;=n;i+=k){ for(int j=1;j&amp;lt;=n;j+=k) cout&amp;lt;&amp;lt;mp[i][j]; cout&amp;lt;&amp;lt;endl; } } int main(){ int t; cin&amp;gt;&amp;gt;t; while(t--)solve(); return 0; } C Sort 对 a 到 z 这 26 个字符分别开前缀和，统计 l 到 r 之间他们不同的数量，更改差异数量除 2 (向上取整)，即可 #include &amp;lt;bits/stdc++.h&amp;gt;</description>
    </item>
    <item>
      <title>博弈论</title>
      <link>https://mjc.us.kg/posts/study/%E5%8D%9A%E5%BC%88%E8%AE%BA/</link>
      <pubDate>Fri, 26 Jul 2024 18:15:23 +0800</pubDate>
      <guid>https://mjc.us.kg/posts/study/%E5%8D%9A%E5%BC%88%E8%AE%BA/</guid>
      <description>简单博弈论学习记录</description>
    </item>
    <item>
      <title>2024萌新联赛2</title>
      <link>https://mjc.us.kg/posts/study/2024%E8%90%8C%E6%96%B0%E8%81%94%E8%B5%9B2/</link>
      <pubDate>Thu, 25 Jul 2024 20:50:08 +0800</pubDate>
      <guid>https://mjc.us.kg/posts/study/2024%E8%90%8C%E6%96%B0%E8%81%94%E8%B5%9B2/</guid>
      <description>萌新联赛补题</description>
    </item>
    <item>
      <title>最小表示法</title>
      <link>https://mjc.us.kg/posts/study/%E6%9C%80%E5%B0%8F%E8%A1%A8%E7%A4%BA%E6%B3%95/</link>
      <pubDate>Wed, 24 Jul 2024 21:53:28 +0800</pubDate>
      <guid>https://mjc.us.kg/posts/study/%E6%9C%80%E5%B0%8F%E8%A1%A8%E7%A4%BA%E6%B3%95/</guid>
      <description>最小表示法学习记录</description>
    </item>
    <item>
      <title>2024HDU2</title>
      <link>https://mjc.us.kg/posts/study/2024hdu2/</link>
      <pubDate>Tue, 23 Jul 2024 21:53:03 +0800</pubDate>
      <guid>https://mjc.us.kg/posts/study/2024hdu2/</guid>
      <description>杭电多校 2 补题 1010 女神的睿智 按顺序合并 8 块碎片，如果两片相同，合成后仍相同，如不同，取左侧的，最后合成大碎片时，如果两片相同，不变，如果不同，取出现次数最多的，如果不确定，输出N。 签到，直接暴力 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; void solve(){ string t,s; cin&amp;gt;&amp;gt;s; map&amp;lt;char,int&amp;gt;vis; for(int i=0;i&amp;lt;8;i++){ if(i%2!=1)t+=s[i]; vis[s[i]]++; } s=t; t=&amp;#34;&amp;#34;; for(int i=0;i&amp;lt;4;i++){ if(i%2!=1)t+=s[i]; } if(vis[t[0]]==vis[t[1]])cout&amp;lt;&amp;lt;&amp;#34;N&amp;#34;; else if(vis[t[0]]&amp;gt;vit[t[1]])cout&amp;lt;&amp;lt;t[0]; else cout&amp;lt;&amp;lt;t[1]; cout&amp;lt;&amp;lt;&amp;#34;\n&amp;#34;; } int main(){ int t=1; cin&amp;gt;&amp;gt;t; while(t--)solve(); return 0; } 1007 URL 划分 输入</description>
    </item>
    <item>
      <title>Manacher</title>
      <link>https://mjc.us.kg/posts/study/manacher/</link>
      <pubDate>Mon, 22 Jul 2024 22:59:43 +0800</pubDate>
      <guid>https://mjc.us.kg/posts/study/manacher/</guid>
      <description>Manacher 学习记录</description>
    </item>
    <item>
      <title>0721</title>
      <link>https://mjc.us.kg/posts/study/0721/</link>
      <pubDate>Sun, 21 Jul 2024 16:09:03 +0800</pubDate>
      <guid>https://mjc.us.kg/posts/study/0721/</guid>
      <description>学习记录</description>
    </item>
    <item>
      <title>KMP</title>
      <link>https://mjc.us.kg/posts/study/kmp/</link>
      <pubDate>Sat, 20 Jul 2024 21:33:32 +0800</pubDate>
      <guid>https://mjc.us.kg/posts/study/kmp/</guid>
      <description>KMP算法学习记录</description>
    </item>
    <item>
      <title>简单的排序</title>
      <link>https://mjc.us.kg/posts/study/easy-sort/</link>
      <pubDate>Sat, 20 Jul 2024 12:16:26 +0800</pubDate>
      <guid>https://mjc.us.kg/posts/study/easy-sort/</guid>
      <description>简单的排序实现 快速排序 快排 分治思想 复杂度 [nlogn, n^2] 不稳定 &amp;ndash;x随机取 排序区间为 [l, r] 时，长度小于 1，直接退出，否则选一个数字 x 作为比较元素 将大于 x 的放右边，小于 x 的放左边，等于 x 的随意放 确定 x 的位置后，对两侧继续递归 void quicksort(int l, int r) { if (l &amp;gt;= r) return; // 长度小于 1，直接退出 swap(a[l], a[l + rand() % (r - l +</description>
    </item>
  </channel>
</rss>
