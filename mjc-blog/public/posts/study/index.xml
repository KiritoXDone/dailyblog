<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>👨🏻‍💻 技术 on KiritoXD&#39;s Blog</title>
    <link>https://KiritoXDone.github.io/posts/study/</link>
    <description>Recent content in 👨🏻‍💻 技术 on KiritoXD&#39;s Blog</description>
    <generator>Hugo -- 0.129.0</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 27 Jul 2024 18:28:37 +0800</lastBuildDate>
    <atom:link href="https://KiritoXDone.github.io/posts/study/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CF962</title>
      <link>https://KiritoXDone.github.io/posts/study/cf962/</link>
      <pubDate>Sat, 27 Jul 2024 18:28:37 +0800</pubDate>
      <guid>https://KiritoXDone.github.io/posts/study/cf962/</guid>
      <description>Codeforces Round 962 还得练 A Legs 先除 4 再除 2 1#include &amp;lt;bits/stdc++.h&amp;gt; 2using namespace std; 3 4void solve(){ 5 int n; 6 cin&amp;gt;&amp;gt;n; 7 int cnt=n/4; 8 if(n%4!=0)cnt++; 9 cout&amp;lt;&amp;lt;cnt&amp;lt;&amp;lt;endl; 10} 11 12int main(){ 13 int t; 14 cin&amp;gt;&amp;gt;t; 15 while(t--)solve(); 16 return 0; 17} B Scale 按题意合理间隔输出即可 1#include &amp;lt;bits/stdc++.h&amp;gt; 2using namespace std; 3const int N =1010; 4 5char mp[N][N]; 6 7void solve(){ 8 int n,k; 9 cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;k; 10 for(int i=1;i&amp;lt;=n;i++) 11 for(int j=1;j&amp;lt;=n;j++)cin&amp;gt;&amp;gt;mp[i][j]; 12 for(int i=1;i&amp;lt;=n;i+=k){ 13 for(int j=1;j&amp;lt;=n;j+=k) 14 cout&amp;lt;&amp;lt;mp[i][j]; 15 cout&amp;lt;&amp;lt;endl; 16 } 17} 18 19int main(){ 20 int t; 21 cin&amp;gt;&amp;gt;t; 22 while(t--)solve(); 23 return 0; 24} C Sort 对 a 到 z 这 26 个字符分别开前缀和，统计 l 到 r 之间</description>
    </item>
    <item>
      <title>博弈论</title>
      <link>https://KiritoXDone.github.io/posts/study/%E5%8D%9A%E5%BC%88%E8%AE%BA/</link>
      <pubDate>Fri, 26 Jul 2024 18:15:23 +0800</pubDate>
      <guid>https://KiritoXDone.github.io/posts/study/%E5%8D%9A%E5%BC%88%E8%AE%BA/</guid>
      <description>博弈论 简介 两人在公平规则下进行有限的对决，胜负明确 类似有向无环图，由一个状态转移到下一个状态 对先手来说，存在两种状态，即必胜态和必败态 必胜态 当前状态的后续为必败态，当前状态即为必胜态 必败态 不存在后续，或是所有后续都必胜 DP 解决博弈 利用状态转移的关系，来解决简单的博弈问题 移棋子问题 n</description>
    </item>
    <item>
      <title>2024萌新联赛2</title>
      <link>https://KiritoXDone.github.io/posts/study/2024%E8%90%8C%E6%96%B0%E8%81%94%E8%B5%9B2/</link>
      <pubDate>Thu, 25 Jul 2024 20:50:08 +0800</pubDate>
      <guid>https://KiritoXDone.github.io/posts/study/2024%E8%90%8C%E6%96%B0%E8%81%94%E8%B5%9B2/</guid>
      <description>2024 河南萌新联赛 2 状态 + 狗运+ py 大法，目前最好的一把 I 重生之zbk要拿回属于他的一切 签到，暴力找 chuan 的数量即可 1#include &amp;lt;bits/stdc++.h&amp;gt; 2using namespace std; 3 4int main() { 5 int n; 6 cin &amp;gt;&amp;gt; n; 7 string s; 8 cin &amp;gt;&amp;gt; s; 9 int pos = s.find(&amp;#34;chuan&amp;#34;), cnt = 0; 10 while (pos != string::npos) { 11 cnt++; 12 pos = s.find(&amp;#34;chuan&amp;#34;, pos + 1); 13 } 14 cout &amp;lt;&amp;lt; cnt &amp;lt;&amp;lt; endl; 15 return 0; 16} F 水灵灵的小学弟 观察题目，发现博弈双方名称相同，不管谁赢都</description>
    </item>
    <item>
      <title>最小表示法</title>
      <link>https://KiritoXDone.github.io/posts/study/%E6%9C%80%E5%B0%8F%E8%A1%A8%E7%A4%BA%E6%B3%95/</link>
      <pubDate>Wed, 24 Jul 2024 21:53:28 +0800</pubDate>
      <guid>https://KiritoXDone.github.io/posts/study/%E6%9C%80%E5%B0%8F%E8%A1%A8%E7%A4%BA%E6%B3%95/</guid>
      <description>最小表示法 理论学习 给定一个字符串 s，首尾相接（循环同构），找到其字典序最小的情况 O(n) 用两个指针 i,j, 分别指想目前两个可能是答案的起始位置 初始 i = 1, j = 2, 随着算法进行增大 假设现在 i &amp;lt; j, 且从 i 开始的 k 位字符和从 j 开始的 k 位字符是一样的，此时这两段子串相同 如果 s[i+k]!=s[j+k] 谁大谁往后移动 k+1 个位置 如果 s[i+k]==s[j+k] 随</description>
    </item>
    <item>
      <title>2024HDU2</title>
      <link>https://KiritoXDone.github.io/posts/study/2024hdu2/</link>
      <pubDate>Tue, 23 Jul 2024 21:53:03 +0800</pubDate>
      <guid>https://KiritoXDone.github.io/posts/study/2024hdu2/</guid>
      <description>杭电多校 2 补题 1010 女神的睿智 按顺序合并 8 块碎片，如果两片相同，合成后仍相同，如不同，取左侧的，最后合成大碎片时，如果两片相同，不变，如果不同，取出现次数最多的，如果不确定，输出N。 签到，直接暴力 1#include &amp;lt;bits/stdc++.h&amp;gt; 2using namespace std; 3 4void solve(){ 5 string t,s; 6 cin&amp;gt;&amp;gt;s; 7 map&amp;lt;char,int&amp;gt;vis; 8 for(int i=0;i&amp;lt;8;i++){ 9 if(i%2!=1)t+=s[i]; 10 vis[s[i]]++; 11 } 12 s=t; 13 t=&amp;#34;&amp;#34;; 14 for(int i=0;i&amp;lt;4;i++){ 15 if(i%2!=1)t+=s[i]; 16 } 17 if(vis[t[0]]==vis[t[1]])cout&amp;lt;&amp;lt;&amp;#34;N&amp;#34;; 18 else if(vis[t[0]]&amp;gt;vit[t[1]])cout&amp;lt;&amp;lt;t[0]; 19 else cout&amp;lt;&amp;lt;t[1]; 20</description>
    </item>
    <item>
      <title>Manacher</title>
      <link>https://KiritoXDone.github.io/posts/study/manacher/</link>
      <pubDate>Mon, 22 Jul 2024 22:59:43 +0800</pubDate>
      <guid>https://KiritoXDone.github.io/posts/study/manacher/</guid>
      <description>Manacher 理念学习 解决最长回文子串问题 给出一个任意字符串，求出这个字符串中最长的回文子串 正常情况下，需要对长度奇偶不同的分类讨论。但可以用一个 s 中不存在的字符，把 s 中每一位隔开，再求新串中奇数长度的最长回文子串即可 对于新串 s ，我们的目的是求出从它的任意位置 i 出发，往两边最远能拓展出的回文</description>
    </item>
    <item>
      <title>0721</title>
      <link>https://KiritoXDone.github.io/posts/study/0721/</link>
      <pubDate>Sun, 21 Jul 2024 16:09:03 +0800</pubDate>
      <guid>https://KiritoXDone.github.io/posts/study/0721/</guid>
      <description>学习记录</description>
    </item>
    <item>
      <title>KMP</title>
      <link>https://KiritoXDone.github.io/posts/study/kmp/</link>
      <pubDate>Sat, 20 Jul 2024 21:33:32 +0800</pubDate>
      <guid>https://KiritoXDone.github.io/posts/study/kmp/</guid>
      <description>KMP算法学习记录</description>
    </item>
    <item>
      <title>简单的排序</title>
      <link>https://KiritoXDone.github.io/posts/study/easy-sort/</link>
      <pubDate>Sat, 20 Jul 2024 12:16:26 +0800</pubDate>
      <guid>https://KiritoXDone.github.io/posts/study/easy-sort/</guid>
      <description>简单的排序实现 快速排序 快排 分治思想 复杂度 [nlogn, n^2] 不稳定 &amp;ndash;x随机取 排序区间为 [l, r] 时，长度小于 1，直接退出，否则选一个数字 x 作为比较元素 将大于 x 的放右边，小于 x 的放左边，等于 x 的随意放 确定 x 的位置后，对两侧继续递归 1void quicksort(int l, int r) { 2 if (l &amp;gt;= r) return; // 长度小于 1，直接退出 3 swap(a[l], a[l + rand() % (r -</description>
    </item>
  </channel>
</rss>
